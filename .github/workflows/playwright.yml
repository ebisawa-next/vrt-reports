name: Playwright Tests
on:
  issue_comment:
    types: [created]

jobs:
  visual_regression:
    # ラベル「VisualRegression」と EE 生成完了の PR comment を参照する
    if: |
      github.event.issue.pull_request != null &&
      contains(github.event.issue.labels.*.name, 'VisualRegression') &&
      startsWith(github.event.comment.body, 'まぐろ')
    timeout-minutes: 60
    runs-on: ubuntu-latest
    outputs:
      artifact_id: ${{ steps.upload_artifact.outputs.artifact_id }}
    steps:
    - name: Get Pull Request number
      id: get_pr
      run: echo "::set-output name=pr_number::$(echo ${{ github.event.issue.number }})"
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci

    # playwright の install && cache
    - name: Get installed Playwright version
      id: playwright-version
      run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" >> $GITHUB_ENV
    - name: Cache playwright binaries
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
    - run: npx playwright install --with-deps
      if: steps.playwright-cache.outputs.cache-hit != 'true'
    - run: npx playwright install-deps
      if: steps.playwright-cache.outputs.cache-hit == 'true'

    # テスト実行
    - name: Run Playwright tests
      run: npx playwright test

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: pr-${{ steps.get_pr.outputs.pr_number }}
        path: ./playwright-report
        retention-days: 1

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: pr-${{ steps.get_pr.outputs.pr_number }}
        path: ./playwright-report

    # # アーティファクトを出力
    # - uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: playwright-report
    #     path: playwright-report/
    #     retention-days: 1
    # - name: Get Artifact ID
    #   id: get_artifact_id
    #   run: echo "::set-output name=artifact_id::${{ steps.upload_artifact.outputs.artifact_id }}"


  # post_comment:
  #   runs-on: ubuntu-latest
  #   needs: visual_regression
  #   steps:

    # - name: Checkout repository
    #   uses: actions/checkout@v4

    - name: Create artifact URL
      id: create_url
      run: echo "artifact_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ needs.build_and_upload.outputs.artifact_id }}" >> $GITHUB_ENV

    # # アーティファクトを github page へデプロイする
    # - name: deploy report to github page
    #   uses: peaceiris/actions-gh-pages@v3
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     publish_dir: playwright-report/
    #     destination_dir: ${{ github.head_ref  }} # PR毎にディレクトリを分けることで上書きを防ぐ


    # - name: Upload artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: pr-${{ steps.get_pr.outputs.pr_number }}
    #     path: ./reports

    # - name: Download artifact
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: pr-${{ steps.get_pr.outputs.pr_number }}
    #     path: ./reports

    - name: Deploy to GitHub Pages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # GitHub Pages用にプレイライトのレポートをデプロイするコマンド
        mkdir -p ./gh-pages/pr-${{ steps.get_pr.outputs.pr_number }}
        cp -r ./playwright-report/* ./gh-pages/pr-${{ steps.get_pr.outputs.pr_number }}/
        cd gh-pages

        git init
        git config user.name '${{ github.actor }}'
        git config user.email '${{ github.actor }}@users.noreply.github.com'
        git add .
        git commit -m "Deploy PR ${steps.get_pr.outputs.pr_number} Playwright report"
        git push --force https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main:gh-pages

    - name: find comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.issue.number }}
        comment-author: 'github-actions[bot]'
        body-includes: reg-suit report

    - name: upsert comment
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.issue.number }}
        body: |
          reg-suit report
          https://ebisawa-next.github.io/vrt-reports/${{github.head_ref}}
        edit-mode: replace

      # - name: Post comment on PR
      #   uses: peter-evans/create-or-update-comment@v2
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     repository: ${{ github.repository }}
      #     issue-number: ${{ github.event.issue.number }}
      #     body: |
      #       アーティファクトは [ここ](${{ env.artifact_url }}) からダウンロードできます。

